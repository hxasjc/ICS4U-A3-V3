package hxasjc.ics4ua3v3;

import hxasjc.ics4ua3v3.monsters.Monster;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.ToolBar;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

import java.util.function.Consumer;

/**
 * This class controls the UI for the actual battle screen
 */
public class BattleController {
    /**
     * Image that displays the player's monster
     */
    @FXML
    private ImageView playerImage;

    /**
     * Image that displays the computer's monster
     */
    @FXML
    private ImageView computerImage;

    /**
     * ProgressBar that represents the player's health
     */
    @FXML
    private ProgressBar playerHealthBar;

    /**
     * ProgressBar that represents the computer's health
     */
    @FXML
    private ProgressBar computerHealthBar;

    /**
     * Label that displays the player's health
     */
    @FXML
    private Label playerHealthLabel;

    /**
     * Label that displays the player's initiative
     */
    @FXML
    private Label playerInitiativeLabel;

    /**
     * Label that displays the computer's health
     */
    @FXML
    private Label computerHealthLabel;

    /**
     * Label that displays the computer's initiative
     */
    @FXML
    private Label computerInitiativeLabel;

    /**
     * Toolbar that contains {@link AbilityButton} representing all the abilities usable by the player
     */
    @FXML
    private ToolBar abilityToolbar;

    /**
     * Label that displays the player's monster
     */
    @FXML
    private Label playerMonsterLabel;

    /**
     * Label that displays the computer's monster
     */
    @FXML
    private Label computerMonsterLabel;

    /**
     * Action that handles each {@link ActionEvent} generated by {@link BattleController#playerAbilityButtonAction(ActionEvent)}.
     */
    private Consumer<ActionEvent> abilityButtonConsumer = event -> {};

    /**
     * Attempts to set the computer's monster image to the specified image, if it is not null
     * @param image Image to set the computer's monster image to, or null to not change it
     */
    public void setComputerImage(Image image) {
        if (image != null) {
            computerImage.setImage(image);
        }
    }

    /**
     * Attempts to set the player's monster image to the specified image, if it is not null
     * @param image Image to set the player's monster image to, or null to not change it
     */
    public void setPlayerImage(Image image) {
        if (image != null) {
            playerImage.setImage(image);
        }
    }

    /**
     * Update the player's initiative label
     * @param initiative The Player's initiative
     */
    public void setPlayerInitiative(int initiative) {
        playerInitiativeLabel.setText("Initiative: " + initiative);
    }

    /**
     * Updates the computer's initiative label
     * @param initiative The computer's initiative
     */
    public void setComputerInitiative(int initiative) {
        computerInitiativeLabel.setText("Initiative: " + initiative);
    }

    /**
     * Updates the player's health label and bar
     * @param current The player's current health
     * @param max The player's max health
     */
    public void setPlayerHealth(int current, int max) {
        playerHealthLabel.setText("Health: " + current + "/" + max);
        try {
            double healthPercent = (double) current / (double) max;
            playerHealthBar.setProgress(healthPercent);
        } catch (ArithmeticException e) {
            playerHealthBar.setProgress(0);
        }
    }

    /**
     * Updates the computer's health label and bar.
     * @param current The computer's current health
     * @param max The computer's max health
     */
    public void setComputerHealth(int current, int max) {
        computerHealthLabel.setText("Health: " + current + "/" + max);
        try {
            computerHealthBar.setProgress((double) current / (double) max);
        } catch (ArithmeticException e) {
            computerHealthBar.setProgress(0);
        }
    }

    /**
     * Populates the {@link BattleController#abilityToolbar} with the abilities that can be used by the specified monster.
     * @param monster The monster to fetch the abilities from
     */
    public void updateAbilityToolbar(Monster monster) {
        ObservableList<Node> list = abilityToolbar.getItems();
        list.clear();
        Attack primary = monster.getPrimaryAttack().get();
        //Button primaryButton = new Button(primary.getName() + " (" + primary.getDamageRoll() + ")");
        AbilityButton primaryButton = new AbilityButton(primary);
        primaryButton.setOnAction(this::playerAbilityButtonAction);
        list.add(primaryButton);

        monster.getSecondaryAttacks().forEach(supplier -> {
            AbilityButton button = new AbilityButton(supplier.get());
            button.setOnAction(this::playerAbilityButtonAction);
            list.add(button);
        });
    }

    /**
     * Sets whether the {@link BattleController#abilityToolbar} is enabled.
     * @param disable Whether to disable the toolbar
     */
    public void disableAbilityToolbar(boolean disable) {
        abilityToolbar.setDisable(disable);
    }

    /**
     * Handling method that is triggered whenever an {@link AbilityButton} is pressed. It ensures that the event comes
     * from an {@link AbilityButton} and passes it to the {@link BattleController#abilityButtonConsumer}.
     * @param event The event generated by JavaFX
     */
    @FXML
    public void playerAbilityButtonAction(ActionEvent event) {
        try {
            AbilityButton source = (AbilityButton) event.getSource();
            if (source.getParent().getParent().equals(abilityToolbar)) {
                abilityButtonConsumer.accept(event);
            }
        } catch (ClassCastException ignored) {
        } catch (Throwable t) {
            t.printStackTrace();
        }
    }

    /**
     * Sets the consumer which will receive each {@link ActionEvent} produced by pressing an {@link AbilityButton}.
     * @param abilityButtonConsumer Consumer to handle all events from AbilityButtons
     */
    public void setAbilityButtonConsumer(Consumer<ActionEvent> abilityButtonConsumer) {
        this.abilityButtonConsumer = abilityButtonConsumer;
    }

    /**
     * Update the UI labels that contain the names of the active monsters
     * @param player The player's monster
     * @param computer The computer's monster
     */
    public void updateMonsterLabels(Monster player, Monster computer) {
        playerMonsterLabel.setText(Util.getNiceName(player.getClass()));
        computerMonsterLabel.setText(Util.getNiceName(computer.getClass()));
    }
}
